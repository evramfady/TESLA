
TESLA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000784  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000784  00000818  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  00800072  00800072  0000082a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000082a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000085c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000898  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bec  00000000  00000000  00000a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cbf  00000000  00000000  0000260c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e0e  00000000  00000000  000032cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002cc  00000000  00000000  000040dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006cd  00000000  00000000  000043a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a96  00000000  00000000  00004a75  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  0000550b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 dc 02 	jmp	0x5b8	; 0x5b8 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e8       	ldi	r30, 0x84	; 132
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 38       	cpi	r26, 0x8E	; 142
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 15 03 	call	0x62a	; 0x62a <main>
  8a:	0c 94 c0 03 	jmp	0x780	; 0x780 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_send_command>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	98 2f       	mov	r25, r24
  94:	90 7f       	andi	r25, 0xF0	; 240
  96:	9b bb       	out	0x1b, r25	; 27
  98:	98 b3       	in	r25, 0x18	; 24
  9a:	9d 7f       	andi	r25, 0xFD	; 253
  9c:	98 bb       	out	0x18, r25	; 24
  9e:	98 b3       	in	r25, 0x18	; 24
  a0:	98 60       	ori	r25, 0x08	; 8
  a2:	98 bb       	out	0x18, r25	; 24
  a4:	ef e1       	ldi	r30, 0x1F	; 31
  a6:	fe e4       	ldi	r31, 0x4E	; 78
  a8:	31 97       	sbiw	r30, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <lcd_send_command+0x16>
  ac:	00 c0       	rjmp	.+0      	; 0xae <lcd_send_command+0x1c>
  ae:	00 00       	nop
  b0:	98 b3       	in	r25, 0x18	; 24
  b2:	97 7f       	andi	r25, 0xF7	; 247
  b4:	98 bb       	out	0x18, r25	; 24
  b6:	ef e1       	ldi	r30, 0x1F	; 31
  b8:	fe e4       	ldi	r31, 0x4E	; 78
  ba:	31 97       	sbiw	r30, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <lcd_send_command+0x28>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <lcd_send_command+0x2e>
  c0:	00 00       	nop
  c2:	f0 e1       	ldi	r31, 0x10	; 16
  c4:	8f 9f       	mul	r24, r31
  c6:	c0 01       	movw	r24, r0
  c8:	11 24       	eor	r1, r1
  ca:	8b bb       	out	0x1b, r24	; 27
  cc:	88 b3       	in	r24, 0x18	; 24
  ce:	88 60       	ori	r24, 0x08	; 8
  d0:	88 bb       	out	0x18, r24	; 24
  d2:	8f e1       	ldi	r24, 0x1F	; 31
  d4:	9e e4       	ldi	r25, 0x4E	; 78
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <lcd_send_command+0x44>
  da:	00 c0       	rjmp	.+0      	; 0xdc <lcd_send_command+0x4a>
  dc:	00 00       	nop
  de:	88 b3       	in	r24, 0x18	; 24
  e0:	87 7f       	andi	r24, 0xF7	; 247
  e2:	88 bb       	out	0x18, r24	; 24
  e4:	ef e1       	ldi	r30, 0x1F	; 31
  e6:	fe e4       	ldi	r31, 0x4E	; 78
  e8:	31 97       	sbiw	r30, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <lcd_send_command+0x56>
  ec:	00 c0       	rjmp	.+0      	; 0xee <lcd_send_command+0x5c>
  ee:	00 00       	nop
  f0:	08 95       	ret

000000f2 <lcd_init>:
  f2:	80 ef       	ldi	r24, 0xF0	; 240
  f4:	8a bb       	out	0x1a, r24	; 26
  f6:	87 b3       	in	r24, 0x17	; 23
  f8:	8e 60       	ori	r24, 0x0E	; 14
  fa:	87 bb       	out	0x17, r24	; 23
  fc:	80 e2       	ldi	r24, 0x20	; 32
  fe:	8b bb       	out	0x1b, r24	; 27
 100:	88 b3       	in	r24, 0x18	; 24
 102:	88 60       	ori	r24, 0x08	; 8
 104:	88 bb       	out	0x18, r24	; 24
 106:	8f e1       	ldi	r24, 0x1F	; 31
 108:	9e e4       	ldi	r25, 0x4E	; 78
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <lcd_init+0x18>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <lcd_init+0x1e>
 110:	00 00       	nop
 112:	88 b3       	in	r24, 0x18	; 24
 114:	87 7f       	andi	r24, 0xF7	; 247
 116:	88 bb       	out	0x18, r24	; 24
 118:	8f e1       	ldi	r24, 0x1F	; 31
 11a:	9e e4       	ldi	r25, 0x4E	; 78
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <lcd_init+0x2a>
 120:	00 c0       	rjmp	.+0      	; 0x122 <lcd_init+0x30>
 122:	00 00       	nop
 124:	88 e2       	ldi	r24, 0x28	; 40
 126:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_command>
 12a:	8f e1       	ldi	r24, 0x1F	; 31
 12c:	9e e4       	ldi	r25, 0x4E	; 78
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <lcd_init+0x3c>
 132:	00 c0       	rjmp	.+0      	; 0x134 <lcd_init+0x42>
 134:	00 00       	nop
 136:	8f e0       	ldi	r24, 0x0F	; 15
 138:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_command>
 13c:	8f e1       	ldi	r24, 0x1F	; 31
 13e:	9e e4       	ldi	r25, 0x4E	; 78
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <lcd_init+0x4e>
 144:	00 c0       	rjmp	.+0      	; 0x146 <lcd_init+0x54>
 146:	00 00       	nop
 148:	80 e8       	ldi	r24, 0x80	; 128
 14a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_command>
 14e:	08 95       	ret

00000150 <lcd_write_character>:
 150:	98 2f       	mov	r25, r24
 152:	90 7f       	andi	r25, 0xF0	; 240
 154:	9b bb       	out	0x1b, r25	; 27
 156:	98 b3       	in	r25, 0x18	; 24
 158:	92 60       	ori	r25, 0x02	; 2
 15a:	98 bb       	out	0x18, r25	; 24
 15c:	98 b3       	in	r25, 0x18	; 24
 15e:	98 60       	ori	r25, 0x08	; 8
 160:	98 bb       	out	0x18, r25	; 24
 162:	ef e1       	ldi	r30, 0x1F	; 31
 164:	fe e4       	ldi	r31, 0x4E	; 78
 166:	31 97       	sbiw	r30, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <lcd_write_character+0x16>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <lcd_write_character+0x1c>
 16c:	00 00       	nop
 16e:	98 b3       	in	r25, 0x18	; 24
 170:	97 7f       	andi	r25, 0xF7	; 247
 172:	98 bb       	out	0x18, r25	; 24
 174:	ef e1       	ldi	r30, 0x1F	; 31
 176:	fe e4       	ldi	r31, 0x4E	; 78
 178:	31 97       	sbiw	r30, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <lcd_write_character+0x28>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <lcd_write_character+0x2e>
 17e:	00 00       	nop
 180:	f0 e1       	ldi	r31, 0x10	; 16
 182:	8f 9f       	mul	r24, r31
 184:	c0 01       	movw	r24, r0
 186:	11 24       	eor	r1, r1
 188:	8b bb       	out	0x1b, r24	; 27
 18a:	88 b3       	in	r24, 0x18	; 24
 18c:	88 60       	ori	r24, 0x08	; 8
 18e:	88 bb       	out	0x18, r24	; 24
 190:	8f e1       	ldi	r24, 0x1F	; 31
 192:	9e e4       	ldi	r25, 0x4E	; 78
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <lcd_write_character+0x44>
 198:	00 c0       	rjmp	.+0      	; 0x19a <lcd_write_character+0x4a>
 19a:	00 00       	nop
 19c:	88 b3       	in	r24, 0x18	; 24
 19e:	87 7f       	andi	r24, 0xF7	; 247
 1a0:	88 bb       	out	0x18, r24	; 24
 1a2:	ef e1       	ldi	r30, 0x1F	; 31
 1a4:	fe e4       	ldi	r31, 0x4E	; 78
 1a6:	31 97       	sbiw	r30, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <lcd_write_character+0x56>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <lcd_write_character+0x5c>
 1ac:	00 00       	nop
 1ae:	08 95       	ret

000001b0 <lcd_write_word>:
 1b0:	0f 93       	push	r16
 1b2:	1f 93       	push	r17
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	8c 01       	movw	r16, r24
 1ba:	c0 e0       	ldi	r28, 0x00	; 0
 1bc:	d0 e0       	ldi	r29, 0x00	; 0
 1be:	03 c0       	rjmp	.+6      	; 0x1c6 <lcd_write_word+0x16>
 1c0:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_write_character>
 1c4:	21 96       	adiw	r28, 0x01	; 1
 1c6:	f8 01       	movw	r30, r16
 1c8:	ec 0f       	add	r30, r28
 1ca:	fd 1f       	adc	r31, r29
 1cc:	80 81       	ld	r24, Z
 1ce:	81 11       	cpse	r24, r1
 1d0:	f7 cf       	rjmp	.-18     	; 0x1c0 <lcd_write_word+0x10>
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	1f 91       	pop	r17
 1d8:	0f 91       	pop	r16
 1da:	08 95       	ret

000001dc <lcd_goto_xy>:
	lcd_send_command(LCD_CMD_CLEAR_DISPLAY);
	_delay_ms(5);
}
void lcd_goto_xy (uint8_t line,uint8_t pos)				//line = 0 or 1
{
	lcd_send_command((0x80|(line<<6))+pos);
 1dc:	20 e4       	ldi	r18, 0x40	; 64
 1de:	82 9f       	mul	r24, r18
 1e0:	c0 01       	movw	r24, r0
 1e2:	11 24       	eor	r1, r1
 1e4:	80 68       	ori	r24, 0x80	; 128
 1e6:	86 0f       	add	r24, r22
 1e8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ec:	87 ec       	ldi	r24, 0xC7	; 199
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <lcd_goto_xy+0x14>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <lcd_goto_xy+0x1a>
 1f6:	00 00       	nop
 1f8:	08 95       	ret

000001fa <motor_init>:
#include <util/delay.h>

void motor_init()
{
	
	Dio_ChannelDirectionSet(MOTORS_DIR,DIO_PIN0 , DIO_OUTPUT);
 1fa:	41 e0       	ldi	r20, 0x01	; 1
 1fc:	60 e0       	ldi	r22, 0x00	; 0
 1fe:	87 e3       	ldi	r24, 0x37	; 55
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 2d 03 	call	0x65a	; 0x65a <Dio_ChannelDirectionSet>
	Dio_ChannelDirectionSet(MOTORS_DIR,DIO_PIN1 , DIO_OUTPUT);
 206:	41 e0       	ldi	r20, 0x01	; 1
 208:	61 e0       	ldi	r22, 0x01	; 1
 20a:	87 e3       	ldi	r24, 0x37	; 55
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 2d 03 	call	0x65a	; 0x65a <Dio_ChannelDirectionSet>
	Dio_ChannelDirectionSet(MOTORS_DIR,DIO_PIN2 , DIO_OUTPUT);
 212:	41 e0       	ldi	r20, 0x01	; 1
 214:	62 e0       	ldi	r22, 0x02	; 2
 216:	87 e3       	ldi	r24, 0x37	; 55
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 2d 03 	call	0x65a	; 0x65a <Dio_ChannelDirectionSet>
	Dio_ChannelDirectionSet(MOTORS_DIR,DIO_PIN3 , DIO_OUTPUT);
 21e:	41 e0       	ldi	r20, 0x01	; 1
 220:	63 e0       	ldi	r22, 0x03	; 3
 222:	87 e3       	ldi	r24, 0x37	; 55
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 2d 03 	call	0x65a	; 0x65a <Dio_ChannelDirectionSet>
 22a:	08 95       	ret

0000022c <motor_forward>:
}

void motor_forward()
{
	
	Dio_ChannelWrite(MOTORS_OUT,IN1,DIO_HIGH);
 22c:	41 e0       	ldi	r20, 0x01	; 1
 22e:	60 e0       	ldi	r22, 0x00	; 0
 230:	88 e3       	ldi	r24, 0x38	; 56
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 4b 03 	call	0x696	; 0x696 <Dio_ChannelWrite>
	Dio_ChannelWrite(MOTORS_OUT,IN4,DIO_HIGH);
 238:	41 e0       	ldi	r20, 0x01	; 1
 23a:	63 e0       	ldi	r22, 0x03	; 3
 23c:	88 e3       	ldi	r24, 0x38	; 56
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	0e 94 4b 03 	call	0x696	; 0x696 <Dio_ChannelWrite>
 244:	08 95       	ret

00000246 <motor_brake>:
}

void motor_brake()
{
	
	Dio_ChannelWrite(MOTORS_OUT,IN1,DIO_LOW);
 246:	40 e0       	ldi	r20, 0x00	; 0
 248:	60 e0       	ldi	r22, 0x00	; 0
 24a:	88 e3       	ldi	r24, 0x38	; 56
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 4b 03 	call	0x696	; 0x696 <Dio_ChannelWrite>
	Dio_ChannelWrite(MOTORS_OUT,IN4,DIO_LOW);
 252:	40 e0       	ldi	r20, 0x00	; 0
 254:	63 e0       	ldi	r22, 0x03	; 3
 256:	88 e3       	ldi	r24, 0x38	; 56
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 4b 03 	call	0x696	; 0x696 <Dio_ChannelWrite>
	
	//Dio_ChannelWrite(MOTORS_OUT,IN2,DIO_HIGH);
	//Dio_ChannelWrite(MOTORS_OUT,IN3,DIO_HIGH);
	
	//_delay_ms(500);
	Dio_ChannelWrite(MOTORS_OUT,IN2,DIO_LOW);
 25e:	40 e0       	ldi	r20, 0x00	; 0
 260:	61 e0       	ldi	r22, 0x01	; 1
 262:	88 e3       	ldi	r24, 0x38	; 56
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 4b 03 	call	0x696	; 0x696 <Dio_ChannelWrite>
	Dio_ChannelWrite(MOTORS_OUT,IN3,DIO_LOW);
 26a:	40 e0       	ldi	r20, 0x00	; 0
 26c:	62 e0       	ldi	r22, 0x02	; 2
 26e:	88 e3       	ldi	r24, 0x38	; 56
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	0e 94 4b 03 	call	0x696	; 0x696 <Dio_ChannelWrite>
 276:	08 95       	ret

00000278 <motor_right>:
}

void motor_right()
{
	
	Dio_ChannelWrite(MOTORS_OUT,IN2,DIO_HIGH);
 278:	41 e0       	ldi	r20, 0x01	; 1
 27a:	61 e0       	ldi	r22, 0x01	; 1
 27c:	88 e3       	ldi	r24, 0x38	; 56
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	0e 94 4b 03 	call	0x696	; 0x696 <Dio_ChannelWrite>
	Dio_ChannelWrite(MOTORS_OUT,IN4,DIO_HIGH);
 284:	41 e0       	ldi	r20, 0x01	; 1
 286:	63 e0       	ldi	r22, 0x03	; 3
 288:	88 e3       	ldi	r24, 0x38	; 56
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 4b 03 	call	0x696	; 0x696 <Dio_ChannelWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 290:	2f ef       	ldi	r18, 0xFF	; 255
 292:	87 ea       	ldi	r24, 0xA7	; 167
 294:	91 e6       	ldi	r25, 0x61	; 97
 296:	21 50       	subi	r18, 0x01	; 1
 298:	80 40       	sbci	r24, 0x00	; 0
 29a:	90 40       	sbci	r25, 0x00	; 0
 29c:	e1 f7       	brne	.-8      	; 0x296 <motor_right+0x1e>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <motor_right+0x28>
 2a0:	00 00       	nop
	
	_delay_ms(2000);

	Dio_ChannelWrite( MOTORS_OUT,IN2,DIO_LOW);
 2a2:	40 e0       	ldi	r20, 0x00	; 0
 2a4:	61 e0       	ldi	r22, 0x01	; 1
 2a6:	88 e3       	ldi	r24, 0x38	; 56
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 4b 03 	call	0x696	; 0x696 <Dio_ChannelWrite>
	Dio_ChannelWrite( MOTORS_OUT,IN4,DIO_LOW);
 2ae:	40 e0       	ldi	r20, 0x00	; 0
 2b0:	63 e0       	ldi	r22, 0x03	; 3
 2b2:	88 e3       	ldi	r24, 0x38	; 56
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 4b 03 	call	0x696	; 0x696 <Dio_ChannelWrite>
 2ba:	08 95       	ret

000002bc <motor_left>:
}

void motor_left()
{
	
	Dio_ChannelWrite(MOTORS_OUT,IN1,DIO_HIGH);
 2bc:	41 e0       	ldi	r20, 0x01	; 1
 2be:	60 e0       	ldi	r22, 0x00	; 0
 2c0:	88 e3       	ldi	r24, 0x38	; 56
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	0e 94 4b 03 	call	0x696	; 0x696 <Dio_ChannelWrite>
	Dio_ChannelWrite(MOTORS_OUT,IN3,DIO_HIGH);
 2c8:	41 e0       	ldi	r20, 0x01	; 1
 2ca:	62 e0       	ldi	r22, 0x02	; 2
 2cc:	88 e3       	ldi	r24, 0x38	; 56
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 4b 03 	call	0x696	; 0x696 <Dio_ChannelWrite>
 2d4:	2f ef       	ldi	r18, 0xFF	; 255
 2d6:	87 ea       	ldi	r24, 0xA7	; 167
 2d8:	91 e6       	ldi	r25, 0x61	; 97
 2da:	21 50       	subi	r18, 0x01	; 1
 2dc:	80 40       	sbci	r24, 0x00	; 0
 2de:	90 40       	sbci	r25, 0x00	; 0
 2e0:	e1 f7       	brne	.-8      	; 0x2da <motor_left+0x1e>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <motor_left+0x28>
 2e4:	00 00       	nop
	
	_delay_ms(2000);

	Dio_ChannelWrite( MOTORS_OUT,IN1,DIO_LOW);
 2e6:	40 e0       	ldi	r20, 0x00	; 0
 2e8:	60 e0       	ldi	r22, 0x00	; 0
 2ea:	88 e3       	ldi	r24, 0x38	; 56
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	0e 94 4b 03 	call	0x696	; 0x696 <Dio_ChannelWrite>
	Dio_ChannelWrite( MOTORS_OUT,IN3,DIO_LOW);
 2f2:	40 e0       	ldi	r20, 0x00	; 0
 2f4:	62 e0       	ldi	r22, 0x02	; 2
 2f6:	88 e3       	ldi	r24, 0x38	; 56
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	0e 94 4b 03 	call	0x696	; 0x696 <Dio_ChannelWrite>
 2fe:	08 95       	ret

00000300 <Servo_Init>:
#include <avr/io.h>
#include <util/delay.h>

void Servo_Init()
{
	DDRD = 0x80; //Makes RD7 output pin
 300:	80 e8       	ldi	r24, 0x80	; 128
 302:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x00;
 304:	12 ba       	out	0x12, r1	; 18
 306:	08 95       	ret

00000308 <servo_rotate0>:
	
}

void servo_rotate0()
{
	PORTD = 0x80;
 308:	80 e8       	ldi	r24, 0x80	; 128
 30a:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 30c:	8f e0       	ldi	r24, 0x0F	; 15
 30e:	96 e0       	ldi	r25, 0x06	; 6
 310:	01 97       	sbiw	r24, 0x01	; 1
 312:	f1 f7       	brne	.-4      	; 0x310 <servo_rotate0+0x8>
 314:	00 c0       	rjmp	.+0      	; 0x316 <servo_rotate0+0xe>
 316:	00 00       	nop
	_delay_us(388);
	PORTD = 0x00;
 318:	12 ba       	out	0x12, r1	; 18
 31a:	08 95       	ret

0000031c <servo_rotate90>:
}
void servo_rotate90()
{
	PORTD = 0x80;
 31c:	80 e8       	ldi	r24, 0x80	; 128
 31e:	82 bb       	out	0x12, r24	; 18
 320:	8f eb       	ldi	r24, 0xBF	; 191
 322:	93 e1       	ldi	r25, 0x13	; 19
 324:	01 97       	sbiw	r24, 0x01	; 1
 326:	f1 f7       	brne	.-4      	; 0x324 <servo_rotate90+0x8>
 328:	00 c0       	rjmp	.+0      	; 0x32a <servo_rotate90+0xe>
 32a:	00 00       	nop
	_delay_us(1264);
	PORTD = 0x00;
 32c:	12 ba       	out	0x12, r1	; 18
 32e:	08 95       	ret

00000330 <servo_rotate180>:
}
void servo_rotate180()
{
	PORTD = 0x80;
 330:	80 e8       	ldi	r24, 0x80	; 128
 332:	82 bb       	out	0x12, r24	; 18
 334:	8f e6       	ldi	r24, 0x6F	; 111
 336:	91 e2       	ldi	r25, 0x21	; 33
 338:	01 97       	sbiw	r24, 0x01	; 1
 33a:	f1 f7       	brne	.-4      	; 0x338 <servo_rotate180+0x8>
 33c:	00 c0       	rjmp	.+0      	; 0x33e <servo_rotate180+0xe>
 33e:	00 00       	nop
	_delay_us(2140);
	PORTD = 0x00;
 340:	12 ba       	out	0x12, r1	; 18
 342:	08 95       	ret

00000344 <timer0_init>:
* Return Value: Nothing.
***********************************************************************/
void timer0_init(void)
{
	    	/* Disable Timer 0 */
	    	TCCR0 = DISABLE_MODULE_VALUE;
 344:	13 be       	out	0x33, r1	; 51
	    	/* Setting pre scaler */
	    	TCCR0 = (PRESCLR1_VALUE);
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	83 bf       	out	0x33, r24	; 51
	    	/* Initializing the timer with zero */
	    	TCNT0 = ZER0_INITIALIZER;
 34a:	12 be       	out	0x32, r1	; 50
				/* Timer overflow interrupt enable*/
				TIMSK |=(1<<TOIE0);
 34c:	89 b7       	in	r24, 0x39	; 57
 34e:	81 60       	ori	r24, 0x01	; 1
 350:	89 bf       	out	0x39, r24	; 57
 352:	08 95       	ret

00000354 <enable_ex_interrupt>:
  return;
}

void enable_ex_interrupt(void){

  MCUCR |= (1<<ISC10);		// Trigger INT1 on any logic change.
 354:	85 b7       	in	r24, 0x35	; 53
 356:	84 60       	ori	r24, 0x04	; 4
 358:	85 bf       	out	0x35, r24	; 53
  GICR  |= (1<<INT1);			// Enable INT1 interrupts.
 35a:	8b b7       	in	r24, 0x3b	; 59
 35c:	80 68       	ori	r24, 0x80	; 128
 35e:	8b bf       	out	0x3b, r24	; 59
 360:	08 95       	ret

00000362 <ultrasonic_init>:
uint32_t left_dis;
uint32_t right_dis;

void ultrasonic_init(void){

  TRIGER_DDR|=(1<<TRIGER);
 362:	81 b3       	in	r24, 0x11	; 17
 364:	81 60       	ori	r24, 0x01	; 1
 366:	81 bb       	out	0x11, r24	; 17
  ECHO_DDR&=~(1<<ECHO);
 368:	81 b3       	in	r24, 0x11	; 17
 36a:	87 7f       	andi	r24, 0xF7	; 247
 36c:	81 bb       	out	0x11, r24	; 17
  ECHO_PULLUP|=(1<<ECHO);
 36e:	82 b3       	in	r24, 0x12	; 18
 370:	88 60       	ori	r24, 0x08	; 8
 372:	82 bb       	out	0x12, r24	; 18
  enable_ex_interrupt();
 374:	0e 94 aa 01 	call	0x354	; 0x354 <enable_ex_interrupt>
  timer0_init();
 378:	0e 94 a2 01 	call	0x344	; 0x344 <timer0_init>
 37c:	08 95       	ret

0000037e <ultra_triger>:

  return;
}

void ultra_triger(void){
  if(!sensor_working){
 37e:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <sensor_working>
 382:	81 11       	cpse	r24, r1
 384:	0c c0       	rjmp	.+24     	; 0x39e <ultra_triger+0x20>
    TRIGER_PORT|=(1<<TRIGER);
 386:	82 b3       	in	r24, 0x12	; 18
 388:	81 60       	ori	r24, 0x01	; 1
 38a:	82 bb       	out	0x12, r24	; 18
 38c:	80 e5       	ldi	r24, 0x50	; 80
 38e:	8a 95       	dec	r24
 390:	f1 f7       	brne	.-4      	; 0x38e <ultra_triger+0x10>
    _delay_us(15);
    TRIGER_PORT&=~(1<<TRIGER);
 392:	82 b3       	in	r24, 0x12	; 18
 394:	8e 7f       	andi	r24, 0xFE	; 254
 396:	82 bb       	out	0x12, r24	; 18
    sensor_working=1;
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <sensor_working>
 39e:	08 95       	ret

000003a0 <__vector_2>:
  }
}

ISR(INT1_vect)
{
 3a0:	1f 92       	push	r1
 3a2:	0f 92       	push	r0
 3a4:	0f b6       	in	r0, 0x3f	; 63
 3a6:	0f 92       	push	r0
 3a8:	11 24       	eor	r1, r1
 3aa:	2f 93       	push	r18
 3ac:	3f 93       	push	r19
 3ae:	4f 93       	push	r20
 3b0:	5f 93       	push	r21
 3b2:	6f 93       	push	r22
 3b4:	7f 93       	push	r23
 3b6:	8f 93       	push	r24
 3b8:	9f 93       	push	r25
 3ba:	af 93       	push	r26
 3bc:	bf 93       	push	r27
 3be:	ef 93       	push	r30
 3c0:	ff 93       	push	r31
  if(sensor_working==1)
 3c2:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <sensor_working>
 3c6:	81 30       	cpi	r24, 0x01	; 1
 3c8:	09 f0       	breq	.+2      	; 0x3cc <__vector_2+0x2c>
 3ca:	e5 c0       	rjmp	.+458    	; 0x596 <__EEPROM_REGION_LENGTH__+0x196>
  {
    if(rising_edge==0)
 3cc:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <rising_edge>
 3d0:	81 11       	cpse	r24, r1
 3d2:	0d c0       	rjmp	.+26     	; 0x3ee <__vector_2+0x4e>
	{
      TCNT0=0x00;
 3d4:	12 be       	out	0x32, r1	; 50
      rising_edge=1;
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <rising_edge>
      timer_counter=0;
 3dc:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__data_end>
 3e0:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <__data_end+0x1>
 3e4:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end+0x2>
 3e8:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <__data_end+0x3>
 3ec:	d4 c0       	rjmp	.+424    	; 0x596 <__EEPROM_REGION_LENGTH__+0x196>
    }
  else 
    {
    distance=(timer_counter*256+TCNT0)/931;
 3ee:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 3f2:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x1>
 3f6:	a0 91 74 00 	lds	r26, 0x0074	; 0x800074 <__data_end+0x2>
 3fa:	b0 91 75 00 	lds	r27, 0x0075	; 0x800075 <__data_end+0x3>
 3fe:	ba 2f       	mov	r27, r26
 400:	a9 2f       	mov	r26, r25
 402:	98 2f       	mov	r25, r24
 404:	88 27       	eor	r24, r24
 406:	22 b7       	in	r18, 0x32	; 50
 408:	bc 01       	movw	r22, r24
 40a:	cd 01       	movw	r24, r26
 40c:	62 0f       	add	r22, r18
 40e:	71 1d       	adc	r23, r1
 410:	81 1d       	adc	r24, r1
 412:	91 1d       	adc	r25, r1
 414:	23 ea       	ldi	r18, 0xA3	; 163
 416:	33 e0       	ldi	r19, 0x03	; 3
 418:	40 e0       	ldi	r20, 0x00	; 0
 41a:	50 e0       	ldi	r21, 0x00	; 0
 41c:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__udivmodsi4>
 420:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <distance>
 424:	30 93 81 00 	sts	0x0081, r19	; 0x800081 <distance+0x1>
 428:	40 93 82 00 	sts	0x0082, r20	; 0x800082 <distance+0x2>
 42c:	50 93 83 00 	sts	0x0083, r21	; 0x800083 <distance+0x3>
    lcd_goto_xy(1,0);
 430:	60 e0       	ldi	r22, 0x00	; 0
 432:	70 e0       	ldi	r23, 0x00	; 0
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_goto_xy>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 43c:	4a e0       	ldi	r20, 0x0A	; 10
 43e:	64 e8       	ldi	r22, 0x84	; 132
 440:	70 e0       	ldi	r23, 0x00	; 0
 442:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <distance>
 446:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <distance+0x1>
 44a:	0e 94 8b 03 	call	0x716	; 0x716 <__itoa_ncheck>
  	itoa(distance,distance_str,10);
  	strcat(distance_str, " cm ");
 44e:	a4 e8       	ldi	r26, 0x84	; 132
 450:	b0 e0       	ldi	r27, 0x00	; 0
 452:	0d 90       	ld	r0, X+
 454:	00 20       	and	r0, r0
 456:	e9 f7       	brne	.-6      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 458:	11 97       	sbiw	r26, 0x01	; 1
 45a:	85 e0       	ldi	r24, 0x05	; 5
 45c:	e0 e6       	ldi	r30, 0x60	; 96
 45e:	f0 e0       	ldi	r31, 0x00	; 0
 460:	01 90       	ld	r0, Z+
 462:	0d 92       	st	X+, r0
 464:	8a 95       	dec	r24
 466:	e1 f7       	brne	.-8      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
  	lcd_write_word(distance_str);
 468:	84 e8       	ldi	r24, 0x84	; 132
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_write_word>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 470:	2f ef       	ldi	r18, 0xFF	; 255
 472:	83 ef       	ldi	r24, 0xF3	; 243
 474:	91 e0       	ldi	r25, 0x01	; 1
 476:	21 50       	subi	r18, 0x01	; 1
 478:	80 40       	sbci	r24, 0x00	; 0
 47a:	90 40       	sbci	r25, 0x00	; 0
 47c:	e1 f7       	brne	.-8      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 47e:	00 c0       	rjmp	.+0      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 480:	00 00       	nop
  	_delay_ms(40);
	 servo_rotate90();
 482:	0e 94 8e 01 	call	0x31c	; 0x31c <servo_rotate90>
    timer_counter=0;
 486:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__data_end>
 48a:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <__data_end+0x1>
 48e:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end+0x2>
 492:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <__data_end+0x3>
    rising_edge=0;
 496:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <rising_edge>
	
	
	if (distance <= 10)
 49a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <distance>
 49e:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <distance+0x1>
 4a2:	a0 91 82 00 	lds	r26, 0x0082	; 0x800082 <distance+0x2>
 4a6:	b0 91 83 00 	lds	r27, 0x0083	; 0x800083 <distance+0x3>
 4aa:	0b 97       	sbiw	r24, 0x0b	; 11
 4ac:	a1 05       	cpc	r26, r1
 4ae:	b1 05       	cpc	r27, r1
 4b0:	08 f0       	brcs	.+2      	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 4b2:	6f c0       	rjmp	.+222    	; 0x592 <__EEPROM_REGION_LENGTH__+0x192>
	{
		motor_brake();
 4b4:	0e 94 23 01 	call	0x246	; 0x246 <motor_brake>
	
	
	servo_rotate90();
 4b8:	0e 94 8e 01 	call	0x31c	; 0x31c <servo_rotate90>
	//_delay_ms(500);
	
	servo_rotate0();
 4bc:	0e 94 84 01 	call	0x308	; 0x308 <servo_rotate0>
 4c0:	2f ef       	ldi	r18, 0xFF	; 255
 4c2:	89 e6       	ldi	r24, 0x69	; 105
 4c4:	98 e1       	ldi	r25, 0x18	; 24
 4c6:	21 50       	subi	r18, 0x01	; 1
 4c8:	80 40       	sbci	r24, 0x00	; 0
 4ca:	90 40       	sbci	r25, 0x00	; 0
 4cc:	e1 f7       	brne	.-8      	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 4d0:	00 00       	nop
	_delay_ms(500);
	left_dis = distance;
 4d2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <distance>
 4d6:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <distance+0x1>
 4da:	a0 91 82 00 	lds	r26, 0x0082	; 0x800082 <distance+0x2>
 4de:	b0 91 83 00 	lds	r27, 0x0083	; 0x800083 <distance+0x3>
 4e2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <left_dis>
 4e6:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <left_dis+0x1>
 4ea:	a0 93 7e 00 	sts	0x007E, r26	; 0x80007e <left_dis+0x2>
 4ee:	b0 93 7f 00 	sts	0x007F, r27	; 0x80007f <left_dis+0x3>
 4f2:	2f ef       	ldi	r18, 0xFF	; 255
 4f4:	89 e6       	ldi	r24, 0x69	; 105
 4f6:	98 e1       	ldi	r25, 0x18	; 24
 4f8:	21 50       	subi	r18, 0x01	; 1
 4fa:	80 40       	sbci	r24, 0x00	; 0
 4fc:	90 40       	sbci	r25, 0x00	; 0
 4fe:	e1 f7       	brne	.-8      	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
 500:	00 c0       	rjmp	.+0      	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
 502:	00 00       	nop
	_delay_ms(500);

	servo_rotate180();
 504:	0e 94 98 01 	call	0x330	; 0x330 <servo_rotate180>
 508:	2f ef       	ldi	r18, 0xFF	; 255
 50a:	89 e6       	ldi	r24, 0x69	; 105
 50c:	98 e1       	ldi	r25, 0x18	; 24
 50e:	21 50       	subi	r18, 0x01	; 1
 510:	80 40       	sbci	r24, 0x00	; 0
 512:	90 40       	sbci	r25, 0x00	; 0
 514:	e1 f7       	brne	.-8      	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
 516:	00 c0       	rjmp	.+0      	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
 518:	00 00       	nop
	_delay_ms(500);
	right_dis = distance;
 51a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <distance>
 51e:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <distance+0x1>
 522:	a0 91 82 00 	lds	r26, 0x0082	; 0x800082 <distance+0x2>
 526:	b0 91 83 00 	lds	r27, 0x0083	; 0x800083 <distance+0x3>
 52a:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <right_dis>
 52e:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <right_dis+0x1>
 532:	a0 93 7a 00 	sts	0x007A, r26	; 0x80007a <right_dis+0x2>
 536:	b0 93 7b 00 	sts	0x007B, r27	; 0x80007b <right_dis+0x3>
 53a:	2f ef       	ldi	r18, 0xFF	; 255
 53c:	89 e6       	ldi	r24, 0x69	; 105
 53e:	98 e1       	ldi	r25, 0x18	; 24
 540:	21 50       	subi	r18, 0x01	; 1
 542:	80 40       	sbci	r24, 0x00	; 0
 544:	90 40       	sbci	r25, 0x00	; 0
 546:	e1 f7       	brne	.-8      	; 0x540 <__EEPROM_REGION_LENGTH__+0x140>
 548:	00 c0       	rjmp	.+0      	; 0x54a <__EEPROM_REGION_LENGTH__+0x14a>
 54a:	00 00       	nop
	_delay_ms(500);
	
	servo_rotate90();
 54c:	0e 94 8e 01 	call	0x31c	; 0x31c <servo_rotate90>
	
	if (right_dis < left_dis )
 550:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <right_dis>
 554:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <right_dis+0x1>
 558:	60 91 7a 00 	lds	r22, 0x007A	; 0x80007a <right_dis+0x2>
 55c:	70 91 7b 00 	lds	r23, 0x007B	; 0x80007b <right_dis+0x3>
 560:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <left_dis>
 564:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <left_dis+0x1>
 568:	a0 91 7e 00 	lds	r26, 0x007E	; 0x80007e <left_dis+0x2>
 56c:	b0 91 7f 00 	lds	r27, 0x007F	; 0x80007f <left_dis+0x3>
 570:	48 17       	cp	r20, r24
 572:	59 07       	cpc	r21, r25
 574:	6a 07       	cpc	r22, r26
 576:	7b 07       	cpc	r23, r27
 578:	28 f4       	brcc	.+10     	; 0x584 <__EEPROM_REGION_LENGTH__+0x184>
	{
		motor_left();
 57a:	0e 94 5e 01 	call	0x2bc	; 0x2bc <motor_left>
		//_delay_ms(500);
	    motor_forward();
 57e:	0e 94 16 01 	call	0x22c	; 0x22c <motor_forward>
 582:	04 c0       	rjmp	.+8      	; 0x58c <__EEPROM_REGION_LENGTH__+0x18c>

	} else
	{
		motor_right();
 584:	0e 94 3c 01 	call	0x278	; 0x278 <motor_right>
		//_delay_ms(500);
		motor_forward();
 588:	0e 94 16 01 	call	0x22c	; 0x22c <motor_forward>
	   
	}
	
	servo_rotate90();
 58c:	0e 94 8e 01 	call	0x31c	; 0x31c <servo_rotate90>
 590:	02 c0       	rjmp	.+4      	; 0x596 <__EEPROM_REGION_LENGTH__+0x196>
	} else {
		motor_forward();
 592:	0e 94 16 01 	call	0x22c	; 0x22c <motor_forward>
	}
	
    }
  }
}
 596:	ff 91       	pop	r31
 598:	ef 91       	pop	r30
 59a:	bf 91       	pop	r27
 59c:	af 91       	pop	r26
 59e:	9f 91       	pop	r25
 5a0:	8f 91       	pop	r24
 5a2:	7f 91       	pop	r23
 5a4:	6f 91       	pop	r22
 5a6:	5f 91       	pop	r21
 5a8:	4f 91       	pop	r20
 5aa:	3f 91       	pop	r19
 5ac:	2f 91       	pop	r18
 5ae:	0f 90       	pop	r0
 5b0:	0f be       	out	0x3f, r0	; 63
 5b2:	0f 90       	pop	r0
 5b4:	1f 90       	pop	r1
 5b6:	18 95       	reti

000005b8 <__vector_11>:

ISR(TIMER0_OVF_vect)
{
 5b8:	1f 92       	push	r1
 5ba:	0f 92       	push	r0
 5bc:	0f b6       	in	r0, 0x3f	; 63
 5be:	0f 92       	push	r0
 5c0:	11 24       	eor	r1, r1
 5c2:	2f 93       	push	r18
 5c4:	8f 93       	push	r24
 5c6:	9f 93       	push	r25
 5c8:	af 93       	push	r26
 5ca:	bf 93       	push	r27
    timer_counter++;
 5cc:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 5d0:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x1>
 5d4:	a0 91 74 00 	lds	r26, 0x0074	; 0x800074 <__data_end+0x2>
 5d8:	b0 91 75 00 	lds	r27, 0x0075	; 0x800075 <__data_end+0x3>
 5dc:	01 96       	adiw	r24, 0x01	; 1
 5de:	a1 1d       	adc	r26, r1
 5e0:	b1 1d       	adc	r27, r1
 5e2:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__data_end>
 5e6:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <__data_end+0x1>
 5ea:	a0 93 74 00 	sts	0x0074, r26	; 0x800074 <__data_end+0x2>
 5ee:	b0 93 75 00 	sts	0x0075, r27	; 0x800075 <__data_end+0x3>
    if(timer_counter >730)
 5f2:	8b 3d       	cpi	r24, 0xDB	; 219
 5f4:	92 40       	sbci	r25, 0x02	; 2
 5f6:	a1 05       	cpc	r26, r1
 5f8:	b1 05       	cpc	r27, r1
 5fa:	68 f0       	brcs	.+26     	; 0x616 <__vector_11+0x5e>
	{
      TCNT0=0x00;
 5fc:	12 be       	out	0x32, r1	; 50
      sensor_working=0;
 5fe:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <sensor_working>
      rising_edge=0;
 602:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <rising_edge>
      timer_counter=0;
 606:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__data_end>
 60a:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <__data_end+0x1>
 60e:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end+0x2>
 612:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <__data_end+0x3>
    }
}
 616:	bf 91       	pop	r27
 618:	af 91       	pop	r26
 61a:	9f 91       	pop	r25
 61c:	8f 91       	pop	r24
 61e:	2f 91       	pop	r18
 620:	0f 90       	pop	r0
 622:	0f be       	out	0x3f, r0	; 63
 624:	0f 90       	pop	r0
 626:	1f 90       	pop	r1
 628:	18 95       	reti

0000062a <main>:
uint32 left_dis =0;
uint32 right_dis =0;
extern uint32 distance;
int main(void)
{
	Servo_Init();
 62a:	0e 94 80 01 	call	0x300	; 0x300 <Servo_Init>
	ultrasonic_init();
 62e:	0e 94 b1 01 	call	0x362	; 0x362 <ultrasonic_init>
	motor_init();
 632:	0e 94 fd 00 	call	0x1fa	; 0x1fa <motor_init>
	lcd_init();
 636:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_init>
	sei();
 63a:	78 94       	sei
	lcd_write_word("Distance is ");
 63c:	85 e6       	ldi	r24, 0x65	; 101
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_write_word>
   
	   
    while (1) 
    {
		ultra_triger();
 644:	0e 94 bf 01 	call	0x37e	; 0x37e <ultra_triger>
 648:	8f e5       	ldi	r24, 0x5F	; 95
 64a:	9a ee       	ldi	r25, 0xEA	; 234
 64c:	01 97       	sbiw	r24, 0x01	; 1
 64e:	f1 f7       	brne	.-4      	; 0x64c <main+0x22>
 650:	00 c0       	rjmp	.+0      	; 0x652 <main+0x28>
 652:	00 00       	nop
		_delay_ms(15);
		motor_forward();
 654:	0e 94 16 01 	call	0x22c	; 0x22c <motor_forward>
 658:	f5 cf       	rjmp	.-22     	; 0x644 <main+0x1a>

0000065a <Dio_ChannelDirectionSet>:

DioPinStateEnum_t Dio_ChannelRead(volatile uint8 * Port_reg, DioPinEnum_t Channel)
{
	DioPinStateEnum_t u8LocalPinValue = READ_BIT(*Port_reg,Channel);
	return (u8LocalPinValue);
}
 65a:	44 23       	and	r20, r20
 65c:	19 f0       	breq	.+6      	; 0x664 <Dio_ChannelDirectionSet+0xa>
 65e:	41 30       	cpi	r20, 0x01	; 1
 660:	71 f0       	breq	.+28     	; 0x67e <Dio_ChannelDirectionSet+0x24>
 662:	08 95       	ret
 664:	fc 01       	movw	r30, r24
 666:	40 81       	ld	r20, Z
 668:	21 e0       	ldi	r18, 0x01	; 1
 66a:	30 e0       	ldi	r19, 0x00	; 0
 66c:	02 c0       	rjmp	.+4      	; 0x672 <Dio_ChannelDirectionSet+0x18>
 66e:	22 0f       	add	r18, r18
 670:	33 1f       	adc	r19, r19
 672:	6a 95       	dec	r22
 674:	e2 f7       	brpl	.-8      	; 0x66e <Dio_ChannelDirectionSet+0x14>
 676:	20 95       	com	r18
 678:	24 23       	and	r18, r20
 67a:	20 83       	st	Z, r18
 67c:	08 95       	ret
 67e:	fc 01       	movw	r30, r24
 680:	40 81       	ld	r20, Z
 682:	21 e0       	ldi	r18, 0x01	; 1
 684:	30 e0       	ldi	r19, 0x00	; 0
 686:	02 c0       	rjmp	.+4      	; 0x68c <Dio_ChannelDirectionSet+0x32>
 688:	22 0f       	add	r18, r18
 68a:	33 1f       	adc	r19, r19
 68c:	6a 95       	dec	r22
 68e:	e2 f7       	brpl	.-8      	; 0x688 <Dio_ChannelDirectionSet+0x2e>
 690:	24 2b       	or	r18, r20
 692:	20 83       	st	Z, r18
 694:	08 95       	ret

00000696 <Dio_ChannelWrite>:

void Dio_ChannelWrite(volatile uint8 * Port_reg, DioPinEnum_t Channel, DioPinStateEnum_t State)
{
	switch(State)
 696:	44 23       	and	r20, r20
 698:	19 f0       	breq	.+6      	; 0x6a0 <Dio_ChannelWrite+0xa>
 69a:	41 30       	cpi	r20, 0x01	; 1
 69c:	71 f0       	breq	.+28     	; 0x6ba <Dio_ChannelWrite+0x24>
 69e:	08 95       	ret
	{
		case DIO_LOW:
		CLEAR_BIT(*Port_reg,Channel);
 6a0:	fc 01       	movw	r30, r24
 6a2:	40 81       	ld	r20, Z
 6a4:	21 e0       	ldi	r18, 0x01	; 1
 6a6:	30 e0       	ldi	r19, 0x00	; 0
 6a8:	02 c0       	rjmp	.+4      	; 0x6ae <Dio_ChannelWrite+0x18>
 6aa:	22 0f       	add	r18, r18
 6ac:	33 1f       	adc	r19, r19
 6ae:	6a 95       	dec	r22
 6b0:	e2 f7       	brpl	.-8      	; 0x6aa <Dio_ChannelWrite+0x14>
 6b2:	20 95       	com	r18
 6b4:	24 23       	and	r18, r20
 6b6:	20 83       	st	Z, r18
		break;
 6b8:	08 95       	ret
		case DIO_HIGH:
		SET_BIT(*Port_reg,Channel);
 6ba:	fc 01       	movw	r30, r24
 6bc:	40 81       	ld	r20, Z
 6be:	21 e0       	ldi	r18, 0x01	; 1
 6c0:	30 e0       	ldi	r19, 0x00	; 0
 6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <Dio_ChannelWrite+0x32>
 6c4:	22 0f       	add	r18, r18
 6c6:	33 1f       	adc	r19, r19
 6c8:	6a 95       	dec	r22
 6ca:	e2 f7       	brpl	.-8      	; 0x6c4 <Dio_ChannelWrite+0x2e>
 6cc:	24 2b       	or	r18, r20
 6ce:	20 83       	st	Z, r18
 6d0:	08 95       	ret

000006d2 <__udivmodsi4>:
 6d2:	a1 e2       	ldi	r26, 0x21	; 33
 6d4:	1a 2e       	mov	r1, r26
 6d6:	aa 1b       	sub	r26, r26
 6d8:	bb 1b       	sub	r27, r27
 6da:	fd 01       	movw	r30, r26
 6dc:	0d c0       	rjmp	.+26     	; 0x6f8 <__udivmodsi4_ep>

000006de <__udivmodsi4_loop>:
 6de:	aa 1f       	adc	r26, r26
 6e0:	bb 1f       	adc	r27, r27
 6e2:	ee 1f       	adc	r30, r30
 6e4:	ff 1f       	adc	r31, r31
 6e6:	a2 17       	cp	r26, r18
 6e8:	b3 07       	cpc	r27, r19
 6ea:	e4 07       	cpc	r30, r20
 6ec:	f5 07       	cpc	r31, r21
 6ee:	20 f0       	brcs	.+8      	; 0x6f8 <__udivmodsi4_ep>
 6f0:	a2 1b       	sub	r26, r18
 6f2:	b3 0b       	sbc	r27, r19
 6f4:	e4 0b       	sbc	r30, r20
 6f6:	f5 0b       	sbc	r31, r21

000006f8 <__udivmodsi4_ep>:
 6f8:	66 1f       	adc	r22, r22
 6fa:	77 1f       	adc	r23, r23
 6fc:	88 1f       	adc	r24, r24
 6fe:	99 1f       	adc	r25, r25
 700:	1a 94       	dec	r1
 702:	69 f7       	brne	.-38     	; 0x6de <__udivmodsi4_loop>
 704:	60 95       	com	r22
 706:	70 95       	com	r23
 708:	80 95       	com	r24
 70a:	90 95       	com	r25
 70c:	9b 01       	movw	r18, r22
 70e:	ac 01       	movw	r20, r24
 710:	bd 01       	movw	r22, r26
 712:	cf 01       	movw	r24, r30
 714:	08 95       	ret

00000716 <__itoa_ncheck>:
 716:	bb 27       	eor	r27, r27
 718:	4a 30       	cpi	r20, 0x0A	; 10
 71a:	31 f4       	brne	.+12     	; 0x728 <__itoa_ncheck+0x12>
 71c:	99 23       	and	r25, r25
 71e:	22 f4       	brpl	.+8      	; 0x728 <__itoa_ncheck+0x12>
 720:	bd e2       	ldi	r27, 0x2D	; 45
 722:	90 95       	com	r25
 724:	81 95       	neg	r24
 726:	9f 4f       	sbci	r25, 0xFF	; 255
 728:	0c 94 97 03 	jmp	0x72e	; 0x72e <__utoa_common>

0000072c <__utoa_ncheck>:
 72c:	bb 27       	eor	r27, r27

0000072e <__utoa_common>:
 72e:	fb 01       	movw	r30, r22
 730:	55 27       	eor	r21, r21
 732:	aa 27       	eor	r26, r26
 734:	88 0f       	add	r24, r24
 736:	99 1f       	adc	r25, r25
 738:	aa 1f       	adc	r26, r26
 73a:	a4 17       	cp	r26, r20
 73c:	10 f0       	brcs	.+4      	; 0x742 <__utoa_common+0x14>
 73e:	a4 1b       	sub	r26, r20
 740:	83 95       	inc	r24
 742:	50 51       	subi	r21, 0x10	; 16
 744:	b9 f7       	brne	.-18     	; 0x734 <__utoa_common+0x6>
 746:	a0 5d       	subi	r26, 0xD0	; 208
 748:	aa 33       	cpi	r26, 0x3A	; 58
 74a:	08 f0       	brcs	.+2      	; 0x74e <__utoa_common+0x20>
 74c:	a9 5d       	subi	r26, 0xD9	; 217
 74e:	a1 93       	st	Z+, r26
 750:	00 97       	sbiw	r24, 0x00	; 0
 752:	79 f7       	brne	.-34     	; 0x732 <__utoa_common+0x4>
 754:	b1 11       	cpse	r27, r1
 756:	b1 93       	st	Z+, r27
 758:	11 92       	st	Z+, r1
 75a:	cb 01       	movw	r24, r22
 75c:	0c 94 b0 03 	jmp	0x760	; 0x760 <strrev>

00000760 <strrev>:
 760:	dc 01       	movw	r26, r24
 762:	fc 01       	movw	r30, r24
 764:	67 2f       	mov	r22, r23
 766:	71 91       	ld	r23, Z+
 768:	77 23       	and	r23, r23
 76a:	e1 f7       	brne	.-8      	; 0x764 <strrev+0x4>
 76c:	32 97       	sbiw	r30, 0x02	; 2
 76e:	04 c0       	rjmp	.+8      	; 0x778 <strrev+0x18>
 770:	7c 91       	ld	r23, X
 772:	6d 93       	st	X+, r22
 774:	70 83       	st	Z, r23
 776:	62 91       	ld	r22, -Z
 778:	ae 17       	cp	r26, r30
 77a:	bf 07       	cpc	r27, r31
 77c:	c8 f3       	brcs	.-14     	; 0x770 <strrev+0x10>
 77e:	08 95       	ret

00000780 <_exit>:
 780:	f8 94       	cli

00000782 <__stop_program>:
 782:	ff cf       	rjmp	.-2      	; 0x782 <__stop_program>
